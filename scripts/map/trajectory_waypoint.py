map_id = {
    (300, 323): [(1.9,0,0)],
    (300, 319): [(0.4,-0.4,-1.55)],
    (300, 317): [(0.4,0,0),(0.7,-0.4,-1.55)],
    (300, 310): [(0.6,0,0),(1.2,0.4,1.55),(1.2,0.85,1.55)],
    (300, 311): [(0.75,0,0),(1.05,0.45,1.55),(1.05,0.85,1.55)],

    (302, 315): [(0.4,-0.4,-1.55)],
    (302, 319): [(1.35,0,0)],

    (303, 319): [(1.35,-0.35,-0.2)],
    (303, 317): [(1.35,0,0)],

    (304, 323): [(0.6,0,0),(1.1,0.4,1.55),(1.1,1,1.55)],

    (305, 317): [(0.85,0,0),(1.25,0.4,1.55),(1.25,1,1.55)],
    (305, 319): [(1.15,0,0),(1.55,0.4,1.55),(1.55,0.85,1.55)],
    (305, 310): [(0.4,-0.4,-1.55)],
    (305, 311): [(0.3,0,0),(0.7,-0.4,-1.55)],
    (305, 315): [(1.8,0.05,0)],
    
    (307, 323): [(0.4,-0.4,-1.55)],
    (307, 310): [(1.3,0.08,0)],

    (308, 311): [(1.3,0,0)],

    (309, 315): [(0.5,0,0),(0.95,0.4,1.57),(0.95,0.9,1.57)],
    
    (310, 325): [(0.5,-0.4,-1.4)],
    (310, 316): [(0.5,0,0),(0.85,0.4,1.55)],

    (311, 316): [(0.4,0,0),(0.8,0.4,1.55)],

    (312, 303): [(0.75,0,0),(1.2,0.45,1.55),(1.2,0.85,1.55)],
    (312, 304): [(0.45,0,0),(0.85,0.45,1.55),(0.85,0.85,1.55)],
    (312, 302): [], #TODO: need to check if this is possible
    (312, 316): [(0.1,0,0)],

    (313, 325): [(0.5,0.10,-0.2),(1.85,0.2,0)],
    (313, 302): [(0.4,-0.35,-1.57)],
    (313, 303): [(0.3,0,0),(0.7,-0.35,-1.57)],
    (313, 304): [(0.6,0,0),(0.9,-0.35,-1.57)],

    (314, 313): [(1.15,0,0)],
    (314, 300): [(0.4,-0.4,-1.55)],

    (315, 313): [(0.4,-0.35,-1.57)],
    (315, 330): [(0.6,0.4,1.5)],

    (316, 330): [(0.1,0,0)],
    (316, 300): [(0.5, 0, 0),(0.9,0.75,1.5)],

    (317, 333): [(0.3,0,0),(0.63, 0.35,1.5)],

    (318, 333): [(0.1,0,0)],
    (318, 309): [(0.4,0,0),(0.95,0.6,1.57)],
    (318, 308): [(0.7,0,0),(1.2,0.6,1.57)],
    (318, 307): [(1.2,0,0),(1.6,0.35,1.57),(1.6,0.75,1.57)],

    (319, 333): [(0.3,0,0),(0.63, 0.35,1.5)],
    (319, 314): [(0.4,-0.4,-1.55)],

    (332, 318): [(0.3,-0.1,-0.7),(0.45,-0.35,-1.57)],
 
    (321, 314): [(1.7,0,0)],
    (321, 307): [(0.4,-0.4,-1.55)],
    (321, 308): [(0.2,0,0),(0.55,-0.4,-1.55)],
    (321, 309): [(0.5,0,0),(0.9,-0.4,-1.55)],

    (323, 321): [(0.4,-0.4,-1.55)],
    (323, 312): [(0.3,0,0),(0.63, 0.35,1.5)],

    (325, 321): [(1.2,0.05,0)],
    (325, 305): [(0.4,-0.35,-1.57)],

    (333, 312): [(0.5,0,0)],
    (333, 305): [(0.6,0,0),(0.9,0.4,1.5),(0.9,0.65,1.5)],

    (330, 318): [(0.08,0,0)],
    (330, 331): [(1.1,0,0)]

}
try:
    from map.fine_tuning_map import find_tuning_traj
    print("Fine tuning map found and loaded")
except ImportError:
    print("No fine tuning map found, use default")
    find_tuning_traj = {}

phase_group = {
    0: [332], # entry, this is the virtual signal for entry, so the entering car does not hit the car on main lane
    1: [302,303,317,319,308,307,310,311,323,315,313,313,321,325,314], # this phase main inter go straight from e <--> w and its down stream also green.
    2: [304,309,323,315,312,318], # left turn for main inter e<-->w, and its down stream also green
    3: [300,316],
    4: [333,305],
    100: [330] # exit, always green for now, we sometimes need to red this so no car hit the entering car
}

def get_trajectory_waypoints(start_id, end_id):
    if (start_id, end_id) in find_tuning_traj.keys():
        return find_tuning_traj[(start_id, end_id)]
    return map_id.get((start_id, end_id), [])

def possible_goals(start_id):
    goals = []
    for (s, e) in map_id.keys():
        if s == start_id:
            goals.append(e)
    return goals

def get_phase_group(start_id):
    # so far the lane should only be discharged in one phase, even they have multiple possible goals
    for pg, tags in phase_group.items():
        if start_id in tags:
            return pg
    return -1